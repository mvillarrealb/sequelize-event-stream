[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/SequelizeEventStream.js",
    "content": "const EventEmitter = require('events');\nconst uuidv4 = require('uuid/v4');\nconst { fork } = require('child_process');\nconst path = require('path');\nconst debug = require('debug')('sequelize-event-stream:main');\n/**\n * SequelizeEventStream represents a EventEmitter\n * instance wich can handle custom handlers to\n * sequelize hooks, this handlers comunicate\n * with a forked worker to send messages\n * to a messagery broker from a supported list\n *\n * @author Marco Villarreal\n */\nclass SequelizeEventStream extends EventEmitter {\n  /**\n   *\n   */\n  constructor(workerConfig) {\n    super();\n    this.createWorker(workerConfig);\n  }\n\n  /**\n   * Forks the worker and attach the corresponding\n   * listeners to control received messages, errors\n   * and disconnection status\n   * @method createWorker\n   * @param {Object} workerConfig\n   */\n  createWorker(workerConfig) {\n    const modulePath = path.join(__dirname, 'dispatch', 'dispatchChildProcess.js');\n    debug(`Loading worker from url ${modulePath}`);\n    this.worker = fork(modulePath, [JSON.stringify(workerConfig)]);\n    this.worker.on('message', this.handleWorkerMessage.bind(this));\n    this.worker.on('error', this.handleWorkerError.bind(this));\n    this.worker.on('disconnect', this.handleWorkerDisconnect.bind(this));\n  }\n\n  /**\n   * Attach event listeners to sequelize global\n   * hooks via addHook method\n   * @param {Sequelize} sequelize The instance to be listened\n   */\n  attach(sequelize) {\n    sequelize.addHook('afterCreate', this.createHookHandler('created').bind(this));\n    sequelize.addHook('afterUpdate', this.createHookHandler('updated').bind(this));\n    sequelize.addHook('afterDestroy', this.createHookHandler('destroyed').bind(this));\n\n    sequelize.addHook('afterBulkCreate', this.createBulkHookHandler('bulk-created').bind(this));\n    sequelize.addHook('afterBulkDestroy', this.createBulkHookHandler('bulk-destroyed').bind(this));\n    sequelize.addHook('afterBulkUpdate', this.createBulkHookHandler('bulk-updated').bind(this));\n  }\n\n  /**\n   * Creates a hook handler from a given event name, returns\n   * a valid hook function that can be attached into sequelize.addHook\n   * method\n   * @method createHookHandler\n   * @param {String} eventName The name of the event to be processed\n   * @return {Function}\n   */\n  createHookHandler(eventName) {\n    return instance => {\n      const modelName = this.getModelName(instance);\n      const current = instance.dataValues;\n      const previous = instance._previousDataValues;\n      const event = {\n        event_id: uuidv4(),\n        event_name: `${modelName}-${eventName}`,\n        event_timestamp: new Date(),\n        event_model: modelName,\n        event_body: {\n          current,\n          previous\n        }\n      };\n      debug(`${eventName} event received, delegating to worker...`);\n      this.worker.send(event);\n      /**\n       * Broacast to any class Listening to the event stream\n       * the published event\n       * @event\n       */\n      debug(`Broadcasting event ${eventName} to the listening classes`);\n      this.emit(eventName, event);\n    };\n  }\n\n  /**\n   * @method createBulkHookHandler\n   * @param {String} eventName\n   * @return {Function}\n   */\n  createBulkHookHandler(eventName) {\n    return instances => {\n      const instance = instances[0];\n      const modelName = this.getModelName(instance);\n      const event = {\n        event_id: uuidv4(),\n        event_name: `${modelName}-${eventName}`,\n        event_timestamp: new Date(),\n        event_model: modelName,\n        event_body: instances.map(i => i.get({ plain: true }))\n      };\n      debug(`${eventName} event received, delegating to worker...`);\n      this.worker.send(event);\n\n      debug(`Broadcasting bulk event ${eventName} to the listening classes`);\n      this.emit(eventName, event);\n    };\n  }\n\n  /**\n   * @method getModelName\n   * @param {Sequelize.Model} instance\n   * @return {String}\n   */\n  getModelName(instance) {\n    const modelOptions = instance['_modelOptions'];\n    const schema = modelOptions.schema ? `${modelOptions.schema}.` : '';\n    const tableName = modelOptions.name.plural;\n    return `${schema}${tableName}`;\n  }\n\n  /**\n   *\n   * Handle messages received from the worker\n   * just for debugging purposses\n   * @method handleWorkerMessage\n   * @param {Object} message\n   */\n  handleWorkerMessage(message) {\n    const { error, data, keepalive } = message;\n    if (error != null) {\n      debug('Got error from eventWorker.js');\n    } else if (!keepalive) {\n      debug(`Successfully received messade from eventWorker.js ${data}`);\n    }\n  }\n\n  /**\n   * @method handleWorkerError\n   * @param {Object} message\n   */\n  handleWorkerError(message) {\n    debug('Error received from the worker');\n  }\n\n  /**\n   * @method handleWorkerDisconnect\n   * @param {Object} message \n   */\n  handleWorkerDisconnect(message) {\n    debug('Received a disconnect signal from the worker');\n    if (!this.isShutDown) {\n      debug('Reforking the worker');\n    }\n  }\n\n  /**\n   * Shutsdown the event stream killing the worker\n   * and stopping the listeners\n   * @method shutdown\n   */\n  shutdown() {\n    debug('Invoking shutdown method');\n    this.isShutDown = true;\n    this.worker.kill('SIGTERM');\n  }\n}\n\nmodule.exports = SequelizeEventStream;\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/SequelizeEventStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "EventEmitter",
    "memberof": "lib/SequelizeEventStream.js",
    "static": true,
    "longname": "lib/SequelizeEventStream.js~EventEmitter",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/SequelizeEventStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "uuidv4",
    "memberof": "lib/SequelizeEventStream.js",
    "static": true,
    "longname": "lib/SequelizeEventStream.js~uuidv4",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/SequelizeEventStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "fork",
    "memberof": "lib/SequelizeEventStream.js",
    "static": true,
    "longname": "lib/SequelizeEventStream.js~fork",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/SequelizeEventStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "path",
    "memberof": "lib/SequelizeEventStream.js",
    "static": true,
    "longname": "lib/SequelizeEventStream.js~path",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/SequelizeEventStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/SequelizeEventStream.js",
    "static": true,
    "longname": "lib/SequelizeEventStream.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/SequelizeEventStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "SequelizeEventStream",
    "memberof": "lib/SequelizeEventStream.js",
    "static": true,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/SequelizeEventStream.js",
    "importStyle": null,
    "description": "SequelizeEventStream represents a EventEmitter\ninstance wich can handle custom handlers to\nsequelize hooks, this handlers comunicate\nwith a forked worker to send messages\nto a messagery broker from a supported list",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Marco Villarreal"
      }
    ],
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "createWorker",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#createWorker",
    "access": "public",
    "description": "Forks the worker and attach the corresponding\nlisteners to control received messages, errors\nand disconnection status",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "createWorker"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "workerConfig",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "worker",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#worker",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "attach",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#attach",
    "access": "public",
    "description": "Attach event listeners to sequelize global\nhooks via addHook method",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Sequelize"
        ],
        "spread": false,
        "optional": false,
        "name": "sequelize",
        "description": "The instance to be listened"
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "createHookHandler",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#createHookHandler",
    "access": "public",
    "description": "Creates a hook handler from a given event name, returns\na valid hook function that can be attached into sequelize.addHook\nmethod",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "createHookHandler"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "The name of the event to be processed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "createBulkHookHandler",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#createBulkHookHandler",
    "access": "public",
    "description": "",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "createBulkHookHandler"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "getModelName",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#getModelName",
    "access": "public",
    "description": "",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getModelName"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Sequelize.Model"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "handleWorkerMessage",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#handleWorkerMessage",
    "access": "public",
    "description": "\nHandle messages received from the worker\njust for debugging purposses",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "handleWorkerMessage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "handleWorkerError",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#handleWorkerError",
    "access": "public",
    "description": "",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "handleWorkerError"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "handleWorkerDisconnect",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#handleWorkerDisconnect",
    "access": "public",
    "description": "",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "handleWorkerDisconnect"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "shutdown",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#shutdown",
    "access": "public",
    "description": "Shutsdown the event stream killing the worker\nand stopping the listeners",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "shutdown"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "isShutDown",
    "memberof": "lib/SequelizeEventStream.js~SequelizeEventStream",
    "static": false,
    "longname": "lib/SequelizeEventStream.js~SequelizeEventStream#isShutDown",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "lib/dispatch/EventStreamDispatcher.js",
    "content": "const debug = require('debug')('sequelize-event-stream:dispatch:event-stream-dispatcher');\nconst EventWorkerFactory = require('../workers/EventWorkerFactory');\n\nclass EventStreamDispatcher {\n  /**\n   *\n   * @param {*} workerOptions\n   */\n  constructor(workerOptions) {\n    this.workerOptions = workerOptions;\n    this.pendingQueue = [];\n    this.worker = null;\n    this.isFinished = false;\n    this.workerStatus = 'connected';\n  }\n\n  static create(workerOptions) {\n    return new EventStreamDispatcher(workerOptions);\n  }\n\n  finish() {\n    if (this.isFinished) {\n      throw new Error('Already finished dispatcher');\n    }\n    if (this.worker != null) {\n      this.worker.finish();\n    }\n    this.pendingQueue = [];\n    this.workerStatus = 'disconnected';\n    this.isFinished = true;\n    this.worker = null;\n  }\n\n  dispatchEvent(event) {\n    let response = null;\n    if (this.isFinished) {\n      throw new Error('Cannot dispatch events from a finished dispatcher');\n    }\n    if (this.getWorkerStatus() === 'disconnected') {\n      this.pendingQueue.push(event);\n      debug('Worker is currently disconnected, pushing to pending queue');\n      response = Promise.resolve(event);\n    } else if (this.getWorkerStatus() === 'connected') {\n      debug('Using the worker to publish the message');\n      response = this.getWorker().publish(event);\n    }\n    return response;\n  }\n\n  workerStatusChanged(status) {\n    this.workerStatus = status;\n    this.handleWorkerStatus();\n  }\n\n  getWorker() {\n    if (this.isFinished) {\n      throw new Error('Cannot get Worker from a finished dispatcher');\n    }\n    if (this.worker === null) {\n      const { type, options } = this.workerOptions;\n      this.worker = EventWorkerFactory.getWorker(type, options);\n      this.worker.on('statusChanged', this.handleWorkerStatus.bind(this));\n    }\n    return this.worker;\n  }\n\n  getWorkerStatus() {\n    return this.workerStatus;\n  }\n\n  getPendingQueue() {\n    return this.pendingQueue;\n  }\n\n  async handleWorkerStatus(status) {\n    debug(`Got new status from the worker: ${status}`);\n    this.workerStatus = status;\n    if (this.workerStatus === 'connected') {\n      debug('Check pending queue');\n      while (this.getPendingQueue().length > 0) {\n        const pendingMessage = this.getPendingQueue().shift();\n        this.getWorker().publish(pendingMessage);\n      }\n    }\n  }\n}\n\nmodule.exports = EventStreamDispatcher;\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/dispatch/EventStreamDispatcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dispatch/EventStreamDispatcher.js",
    "static": true,
    "longname": "lib/dispatch/EventStreamDispatcher.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/dispatch/EventStreamDispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "EventWorkerFactory",
    "memberof": "lib/dispatch/EventStreamDispatcher.js",
    "static": true,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventWorkerFactory",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/dispatch/EventStreamDispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "EventStreamDispatcher",
    "memberof": "lib/dispatch/EventStreamDispatcher.js",
    "static": true,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/dispatch/EventStreamDispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "workerOptions",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "workerOptions",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#workerOptions",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "pendingQueue",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#pendingQueue",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "worker",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#worker",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "isFinished",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#isFinished",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "workerStatus",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#workerStatus",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "create",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher.create",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "workerOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "finish",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#finish",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "dispatchEvent",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#dispatchEvent",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "workerStatusChanged",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#workerStatusChanged",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getWorker",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#getWorker",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getWorkerStatus",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#getWorkerStatus",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getPendingQueue",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#getPendingQueue",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "handleWorkerStatus",
    "memberof": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dispatch/EventStreamDispatcher.js~EventStreamDispatcher#handleWorkerStatus",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "lib/dispatch/dispatchChildProcess.js",
    "content": "const debug = require('debug')('sequelize-event-stream:workers:eventWorker');\nconst EventStreamDispatcher = require('./EventStreamDispatcher');\n\nprocess.argv.splice(0, 2);\nconst workerOpts = JSON.parse(process.argv[0]);\n\ndebug('Instantiating EventStreamDispatcher');\nconst streamWorker = EventStreamDispatcher.create(workerOpts);\ndebug('Event worker is ready to publish your events');\n\nprocess.on('message', async event => {\n  debug('Worker received message, handling publish stream');\n  let data = null;\n  let error = null;\n  try {\n    data = await streamWorker.dispatchEvent(event);\n    debug('Got response from  publishWorker');\n  } catch (exception) {\n    console.log(exception);\n    error = exception;\n  }\n  debug('Sending response back to the stream parent');\n  process.send({ error, data });\n});\n\nsetInterval(() => {\n  process.send({\n    error: null,\n    keepalive: true,\n    data: new Date()\n  });\n}, 1000);\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/dispatch/dispatchChildProcess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dispatch/dispatchChildProcess.js",
    "static": true,
    "longname": "lib/dispatch/dispatchChildProcess.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/dispatch/dispatchChildProcess.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "EventStreamDispatcher",
    "memberof": "lib/dispatch/dispatchChildProcess.js",
    "static": true,
    "longname": "lib/dispatch/dispatchChildProcess.js~EventStreamDispatcher",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/dispatch/dispatchChildProcess.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "workerOpts",
    "memberof": "lib/dispatch/dispatchChildProcess.js",
    "static": true,
    "longname": "lib/dispatch/dispatchChildProcess.js~workerOpts",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/dispatch/dispatchChildProcess.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "streamWorker",
    "memberof": "lib/dispatch/dispatchChildProcess.js",
    "static": true,
    "longname": "lib/dispatch/dispatchChildProcess.js~streamWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/dispatch/dispatchChildProcess.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "lib/workers/AMQPWorker.js",
    "content": "const AMQP = require('amqplib');\nconst debug = require('debug')('sequelize-event-stream:workers:AMQPWorker');\nconst EventWorker = require('./EventWorker');\n/**\n * AMQPWorker represents a Event dispatch Worker\n * implementing rabbitmq producer to send\n * messages\n * @author Marco Villarreal\n */\nclass AMQPWorker extends EventWorker {\n  constructor(config) {\n    super(config);\n    this.exchange = config.exchange;\n    this.connectURI = config.connectURI;\n    this.channel = null;\n    this.awaitingCreation = false;\n    this.validate(config.connectURI, [\n      'protocol',\n      'port',\n      'hostname',\n      'username',\n      'password',\n      'vhost'\n    ]);\n  }\n\n  /**\n   * Static property containing all the queues\n   * created by the worker as the deployment\n   * topology\n   * @static\n   * @property QUEUES\n   * @type {Object}\n   */\n  static get QUEUES() {\n    return {\n      CREATED: 'created',\n      UPDATED: 'updated',\n      DESTROYED: 'destroyed',\n      BULK_CREATED: 'bulk-created',\n      BULK_UPDATED: 'bulk-updated',\n      BULK_DESTROYED: 'bulk-destroyed'\n    };\n  }\n\n  /**\n   * Published events to the configured exchange\n   * @async\n   * @param {Object} eventData\n   * @return {Object}\n   */\n  async publish(eventData) {\n    super.publish(eventData);\n    const { event_name } = eventData;\n    const routingKey = event_name.replace(/-/g, '.');\n    debug('fetching Getting AMQP Channel...');\n    const channel = await this.getChannel();\n    debug(`Performing publish to exchange ${this.exchange}, with routing ${routingKey}`);\n    const buffer = Buffer.from(JSON.stringify(eventData), 'UTF-8');\n    const publishResponse = await channel.publish(this.exchange, routingKey, buffer);\n    debug('Sucessfully published the message');\n    return publishResponse;\n  }\n\n  /**\n   * Perform the binding of all the topology queues to\n   * the configured exchange\n   * @method bindQueue\n   */\n  async bindQueues() {\n    debug('Binding exchange to queues');\n    await Promise.all([\n      this.channel.bindQueue(AMQPWorker.QUEUES.CREATED, this.exchange, '*.created'),\n      this.channel.bindQueue(AMQPWorker.QUEUES.UPDATED, this.exchange, '*.updated'),\n      this.channel.bindQueue(AMQPWorker.QUEUES.DESTROYED, this.exchange, '*.destroyed'),\n      this.channel.bindQueue(AMQPWorker.QUEUES.BULK_CREATED, this.exchange, '*.bulk.created'),\n      this.channel.bindQueue(AMQPWorker.QUEUES.BULK_UPDATED, this.exchange, '*.bulk.updated'),\n      this.channel.bindQueue(AMQPWorker.QUEUES.BULK_DESTROYED, this.exchange, '*.bulk.destroyed')\n    ]);\n  }\n\n  /**\n   * Check all the queues to be configured, by checking\n   * it will explicity create the queues if they do not exists\n   * @method checkQueues\n   */\n  async checkQueues() {\n    await Promise.all([\n      this.channel.assertQueue(AMQPWorker.QUEUES.CREATED),\n      this.channel.assertQueue(AMQPWorker.QUEUES.UPDATED),\n      this.channel.assertQueue(AMQPWorker.QUEUES.DESTROYED),\n      this.channel.assertQueue(AMQPWorker.QUEUES.BULK_CREATED),\n      this.channel.assertQueue(AMQPWorker.QUEUES.BULK_UPDATED),\n      this.channel.assertQueue(AMQPWorker.QUEUES.BULK_DESTROYED)\n    ]);\n  }\n\n  /**\n   * Returns the channel to the configured rabbitmq broker\n   * @async\n   * @method getChannel\n   * @return {amqp.Channel}\n   */\n  async getChannel() {\n    if (!this.channel) {\n      this.awaitingCreation = true;\n      debug('Creating new amqp connection');\n      const connection = await AMQP.connect(this.connectURI);\n      debug('Creating amqp channel from the connection');\n      this.channel = await connection.createChannel();\n      debug('Channel created, asserting exchange');\n      await this.channel.assertExchange(this.exchange, 'topic', this.exchangeOptions);\n      await this.checkQueues();\n      await this.bindQueues();\n      debug('Channel is ready to send messages');\n    }\n    return this.channel;\n  }\n}\n\nmodule.exports = AMQPWorker;\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/workers/AMQPWorker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "AMQP",
    "memberof": "lib/workers/AMQPWorker.js",
    "static": true,
    "longname": "lib/workers/AMQPWorker.js~AMQP",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/AMQPWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/workers/AMQPWorker.js",
    "static": true,
    "longname": "lib/workers/AMQPWorker.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/AMQPWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "EventWorker",
    "memberof": "lib/workers/AMQPWorker.js",
    "static": true,
    "longname": "lib/workers/AMQPWorker.js~EventWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/AMQPWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "class",
    "name": "AMQPWorker",
    "memberof": "lib/workers/AMQPWorker.js",
    "static": true,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/AMQPWorker.js",
    "importStyle": null,
    "description": "AMQPWorker represents a Event dispatch Worker\nimplementing rabbitmq producer to send\nmessages",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Marco Villarreal"
      }
    ],
    "interface": false,
    "extends": [
      "EventWorker"
    ]
  },
  {
    "__docId__": 102,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "exchange",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#exchange",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "connectURI",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#connectURI",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "channel",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#channel",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "awaitingCreation",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#awaitingCreation",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "get",
    "name": "QUEUES",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker.QUEUES",
    "access": "public",
    "description": "Static property containing all the queues\ncreated by the worker as the deployment\ntopology",
    "lineNumber": 35,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "QUEUES",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "publish",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#publish",
    "access": "public",
    "description": "Published events to the configured exchange",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "eventData",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "bindQueues",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#bindQueues",
    "access": "public",
    "description": "Perform the binding of all the topology queues to\nthe configured exchange",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "bindQueue"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "checkQueues",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#checkQueues",
    "access": "public",
    "description": "Check all the queues to be configured, by checking\nit will explicity create the queues if they do not exists",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "checkQueues"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "getChannel",
    "memberof": "lib/workers/AMQPWorker.js~AMQPWorker",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/workers/AMQPWorker.js~AMQPWorker#getChannel",
    "access": "public",
    "description": "Returns the channel to the configured rabbitmq broker",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getChannel"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "amqp.Channel"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "lib/workers/EventWorker.js",
    "content": "const EventEmitter = require('events');\n/**\n * EventWorker is a EventEmitter base abstraction\n * to represent every event publisher instance,\n * all publisher must inherit this class.\n *\n * @class EventWorker\n * @author Marco Villarreal\n */\nclass EventWorker extends EventEmitter {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Basic publish abstraction, this is an incomplete method\n   * it just validates the event to be published\n   *\n   * @param {Object} eventData Event data to be published\n   */\n  publish(eventData) {\n    const eventAttributes = Object.keys(eventData);\n    const missingAttributes = this.getEventAttributes().filter(\n      attr => eventAttributes.indexOf(attr) < 0\n    );\n    if (missingAttributes.length > 0) {\n      const event = JSON.stringify(eventData);\n      const errMessage = `Invalid event: Missing required properties: ${missingAttributes}. Blaming event: ${event}`;\n      throw new Error(errMessage);\n    }\n  }\n\n  /**\n   * Parameter validation  of a received object\n   * against an Array of expected attributes,\n   * used by the implementing classes to validate\n   * its constructor parameters\n   *\n   * @param {Object} received The received Object\n   * @param {Array} expected The list of expected parameters\n   * @throws {Error} When a expected parameter is missing\n   */\n  validate(received, expected) {\n    const receivedAttributes = Object.keys(received);\n    const missing = expected.filter(attr => receivedAttributes.indexOf(attr) < 0);\n    if (missing.length > 0) {\n      const expectedList = expected.join(',');\n      throw new Error(`Missing any of the configurations:[${expectedList}]`);\n    }\n  }\n\n  /**\n   * Returns the list of event attributes\n   * @method getEventAttributes\n   * @return {Array}\n   */\n  getEventAttributes() {\n    return ['event_name', 'event_id', 'event_timestamp', 'event_model', 'event_body'];\n  }\n}\n\nmodule.exports = EventWorker;\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/workers/EventWorker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "EventEmitter",
    "memberof": "lib/workers/EventWorker.js",
    "static": true,
    "longname": "lib/workers/EventWorker.js~EventEmitter",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/EventWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "EventWorker",
    "memberof": "lib/workers/EventWorker.js",
    "static": true,
    "longname": "lib/workers/EventWorker.js~EventWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/EventWorker.js",
    "importStyle": null,
    "description": "EventWorker is a EventEmitter base abstraction\nto represent every event publisher instance,\nall publisher must inherit this class.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EventWorker"
      },
      {
        "tagName": "@author",
        "tagValue": "Marco Villarreal"
      }
    ],
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/workers/EventWorker.js~EventWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/EventWorker.js~EventWorker#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "config",
    "memberof": "lib/workers/EventWorker.js~EventWorker",
    "static": false,
    "longname": "lib/workers/EventWorker.js~EventWorker#config",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "publish",
    "memberof": "lib/workers/EventWorker.js~EventWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/EventWorker.js~EventWorker#publish",
    "access": "public",
    "description": "Basic publish abstraction, this is an incomplete method\nit just validates the event to be published",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "eventData",
        "description": "Event data to be published"
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/workers/EventWorker.js~EventWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/EventWorker.js~EventWorker#validate",
    "access": "public",
    "description": "Parameter validation  of a received object\nagainst an Array of expected attributes,\nused by the implementing classes to validate\nits constructor parameters",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "received",
        "description": "The received Object"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": "The list of expected parameters"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "When a expected parameter is missing"
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "getEventAttributes",
    "memberof": "lib/workers/EventWorker.js~EventWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/EventWorker.js~EventWorker#getEventAttributes",
    "access": "public",
    "description": "Returns the list of event attributes",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getEventAttributes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "lib/workers/EventWorkerFactory.js",
    "content": "const AMQPWorker = require('./AMQPWorker');\nconst KafkaWorker = require('./KafkaWorker');\nconst SQSWorker = require('./SQSWorker');\n/**\n * EventWorkerFactory is a simple Factory to create EventWorker instances\n * @example\n *  const amqpWorker = EventWorkerFactory.getWorker('amqp',config);\n */\nclass EventWorkerFactory {\n  /**\n   * A basic list of the supported workers\n   * @property SUPPORTED_WORKER\n   * @static\n   * @type {Object}\n   */\n  static get SUPPORTED_WORKERS() {\n    return {\n      amqp: AMQPWorker,\n      kafka: KafkaWorker,\n      sqs: SQSWorker\n    };\n  }\n\n  /**\n   * Create and returns a Worker based on the worker type and\n   * configuration options\n   * @static\n   * @throws Error if a workerType is unsupported\n   * @param {String} workerType The type of worker to be created(amqp,kafka,sqs)\n   * @param {Object} workerOptions The specific worker config\n   * @return {EventWorker}\n   */\n  static getWorker(workerType, workerOptions) {\n    const supportedWorkers = Object.keys(EventWorkerFactory.SUPPORTED_WORKERS);\n    const properties = Object.keys(workerOptions);\n    if (supportedWorkers.indexOf(workerType) < 0) {\n      const errMessage = `Invalid worker type: supported workers [${supportedWorkers.join(',')}]`;\n      throw new Error(errMessage);\n    }\n    const WorkerClass = EventWorkerFactory.SUPPORTED_WORKERS[workerType];\n    if (properties.length <= 0) {\n      throw new Error(`Empty Configurations for ${WorkerClass.name}`);\n    }\n\n    return new WorkerClass(workerOptions);\n  }\n}\n\nmodule.exports = EventWorkerFactory;\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/workers/EventWorkerFactory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "AMQPWorker",
    "memberof": "lib/workers/EventWorkerFactory.js",
    "static": true,
    "longname": "lib/workers/EventWorkerFactory.js~AMQPWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/EventWorkerFactory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "KafkaWorker",
    "memberof": "lib/workers/EventWorkerFactory.js",
    "static": true,
    "longname": "lib/workers/EventWorkerFactory.js~KafkaWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/EventWorkerFactory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "SQSWorker",
    "memberof": "lib/workers/EventWorkerFactory.js",
    "static": true,
    "longname": "lib/workers/EventWorkerFactory.js~SQSWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/EventWorkerFactory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "EventWorkerFactory",
    "memberof": "lib/workers/EventWorkerFactory.js",
    "static": true,
    "longname": "lib/workers/EventWorkerFactory.js~EventWorkerFactory",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/EventWorkerFactory.js",
    "importStyle": null,
    "description": "EventWorkerFactory is a simple Factory to create EventWorker instances",
    "examples": [
      " const amqpWorker = EventWorkerFactory.getWorker('amqp',config);"
    ],
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 127,
    "kind": "get",
    "name": "SUPPORTED_WORKERS",
    "memberof": "lib/workers/EventWorkerFactory.js~EventWorkerFactory",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/workers/EventWorkerFactory.js~EventWorkerFactory.SUPPORTED_WORKERS",
    "access": "public",
    "description": "A basic list of the supported workers",
    "lineNumber": 16,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "SUPPORTED_WORKER",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getWorker",
    "memberof": "lib/workers/EventWorkerFactory.js~EventWorkerFactory",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/workers/EventWorkerFactory.js~EventWorkerFactory.getWorker",
    "access": "public",
    "description": "Create and returns a Worker based on the worker type and\nconfiguration options",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "workerType",
        "description": "The type of worker to be created(amqp,kafka,sqs)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "workerOptions",
        "description": "The specific worker config"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventWorker"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error if a workerType is unsupported"
      }
    ]
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "lib/workers/KafkaWorker.js",
    "content": "const { HighLevelProducer, KafkaClient } = require('kafka-node');\nconst EventWorker = require('./EventWorker');\n/**\n * KafkaWorker represents a Event dispatch Worker\n * implementing HighLevelProducer Kafka producer to send\n * messages to the configured broker\n *\n * @author Marco Villarreal\n */\nclass KafkaWorker extends EventWorker {\n  constructor(config) {\n    super(config);\n    this.producer = null;\n  }\n\n  publish(eventData) {\n    super.publish(eventData);\n    const { event_name } = eventData;\n    const kafkaMessage = {\n      topic: event_name,\n      message: JSON.stringify(eventData)\n    };\n    this.getProducer().send(kafkaMessage);\n  }\n\n  getProducer() {\n    if (this.producer === null) {\n      const client = new KafkaClient();\n      this.producer = new HighLevelProducer(client);\n    }\n    return this.producer;\n  }\n}\n\nmodule.exports = KafkaWorker;\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/workers/KafkaWorker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "HighLevelProducer",
    "memberof": "lib/workers/KafkaWorker.js",
    "static": true,
    "longname": "lib/workers/KafkaWorker.js~HighLevelProducer",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/KafkaWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "EventWorker",
    "memberof": "lib/workers/KafkaWorker.js",
    "static": true,
    "longname": "lib/workers/KafkaWorker.js~EventWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/KafkaWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "KafkaWorker",
    "memberof": "lib/workers/KafkaWorker.js",
    "static": true,
    "longname": "lib/workers/KafkaWorker.js~KafkaWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/KafkaWorker.js",
    "importStyle": null,
    "description": "KafkaWorker represents a Event dispatch Worker\nimplementing HighLevelProducer Kafka producer to send\nmessages to the configured broker",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Marco Villarreal"
      }
    ],
    "interface": false,
    "extends": [
      "EventWorker"
    ]
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/workers/KafkaWorker.js~KafkaWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/KafkaWorker.js~KafkaWorker#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "producer",
    "memberof": "lib/workers/KafkaWorker.js~KafkaWorker",
    "static": false,
    "longname": "lib/workers/KafkaWorker.js~KafkaWorker#producer",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "publish",
    "memberof": "lib/workers/KafkaWorker.js~KafkaWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/KafkaWorker.js~KafkaWorker#publish",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "eventData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "getProducer",
    "memberof": "lib/workers/KafkaWorker.js~KafkaWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/KafkaWorker.js~KafkaWorker#getProducer",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "lib/workers/SQSWorker.js",
    "content": "const AWS = require('aws-sdk');\nconst EventWorker = require('./EventWorker');\n\nclass SQSWorker extends EventWorker {\n  /**\n   *\n   * @param {} eventData\n   */\n  publish(eventData) {\n    super.publish(eventData);\n    const { QueueUrl } = this.config;\n    const { event_id, event_name, event_timestamp, event_model, event_body } = eventData;\n    const message = {\n      MessageAttributes: {\n        event_id: {\n          DataType: 'String',\n          StringValue: event_id\n        },\n        event_name: {\n          DataType: 'String',\n          StringValue: event_name\n        },\n        event_timestamp: {\n          DataType: 'String',\n          StringValue: event_timestamp\n        },\n        event_model: {\n          DataType: 'String',\n          StringValue: event_model\n        }\n      },\n      MessageBody: event_body,\n      QueueUrl\n    };\n    this.getSQS().sendMessage(message);\n  }\n\n  getSQS() {\n    if (this.sqs === null) {\n      const { apiVersion, region } = this.config;\n      AWS.config.update({ region });\n      this.sqs = new AWS.SQS({ apiVersion });\n    }\n    return this.sqs;\n  }\n}\n\nmodule.exports = SQSWorker;\n",
    "static": true,
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/lib/workers/SQSWorker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "AWS",
    "memberof": "lib/workers/SQSWorker.js",
    "static": true,
    "longname": "lib/workers/SQSWorker.js~AWS",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/SQSWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "EventWorker",
    "memberof": "lib/workers/SQSWorker.js",
    "static": true,
    "longname": "lib/workers/SQSWorker.js~EventWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/SQSWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "SQSWorker",
    "memberof": "lib/workers/SQSWorker.js",
    "static": true,
    "longname": "lib/workers/SQSWorker.js~SQSWorker",
    "access": "public",
    "export": false,
    "importPath": "sequelize-event-stream/lib/workers/SQSWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "EventWorker"
    ],
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "publish",
    "memberof": "lib/workers/SQSWorker.js~SQSWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/SQSWorker.js~SQSWorker#publish",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "getSQS",
    "memberof": "lib/workers/SQSWorker.js~SQSWorker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/workers/SQSWorker.js~SQSWorker#getSQS",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "sqs",
    "memberof": "lib/workers/SQSWorker.js~SQSWorker",
    "static": false,
    "longname": "lib/workers/SQSWorker.js~SQSWorker#sqs",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# sequelize-event-stream\n\n[![npm version](https://img.shields.io/npm/v/sequelize-event-stream.svg)](https://www.npmjs.com/package/sequelize-event-stream)\n[![Build Status](https://travis-ci.org/mvillarrealb/sequelize-event-stream.svg?branch=master)](https://travis-ci.org/mvillarrealb/sequelize-event-stream)\n[![codecov](https://codecov.io/gh/mvillarrealb/sequelize-event-stream/branch/master/graph/badge.svg)](https://codecov.io/gh/mvillarrealb/sequelize-event-stream)\n![node](https://img.shields.io/node/v/sequelize-event-stream.svg)\n[![License](https://img.shields.io/npm/l/sequelize-event-stream.svg?maxAge=2592000?style=plastic)](https://github.com/mvillarrealb/sequelize-event-stream/blob/master/LICENSE)\n\nEvent publishing capabilities for your sequelize's models using hooks.\n\n**sequelize-event-stream** adds a sugaring layer to your database connection, listening for every transactional event in sequelize.\n\n![alt text](./docs/images/sequelize-event-stream-overview.png \"sequelize-event-stream architecture overview\")\n\nThe architecture works as follows:\n\nThe sequelize event stream is attached to your sequelize's instance, it will listen for every supported hook. Supported hooks are:\n\n* afterCreate\n* afterUpdate\n* afterDestroy\n* afterBulkCreate\n* afterBulkUpdate\n* afterBulkDestroy\n\nOnce fired one of the listed hooks it will use a eventWorker configuration to send your message as an event to a queue/topic from the supported brokers.\n\n# Supported Sinks\n\n* Rabbitmq\n* Kafka\n* Amazon SQS\n\n# Installation\n\n```bash\nnpm install --save sequelize-event-stream\n```\n\n# Documentation\n\nYou can check the full [documentation](https://mvillarrealb.github.io/sequelize-event-stream/) to view full usage of this module.\n\n## Run all tests\n\nTo run all unit and integration tests:\n\n```bash\nnpm test\n```\n\n## Run unit tests only\n\nTo run the unit tests use the following command:\n\n```bash\nnpm run unit-test\n```\n\n## Run integ tests only\n\nTo run the integration tests use the following command:\n\n```bash\nnpm run integ-test\n```\n\n# Generate ESDOC Documentation\n\nTo geneate the ESDOC documentation use the following command:\n\n```bash\nnpm run docs\n```\n\n# Running the coverage\n\nTo run the coverage report use the following command\n```bash\nnpm run coverage\n```",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"sequelize-event-stream\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Event publishing capabilities for your sequelize's models using hooks\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"docs\": \"./node_modules/.bin/esdoc\",\n    \"lint\": \"./node_modules/.bin/eslint lib\",\n    \"test\": \"npm run test-unit && npm run test-integration\",\n    \"test-unit\": \"mocha -t 30000 --reporter spec \\\"test/unit/**/*.js\\\"\",\n    \"test-integration\": \"mocha -t 30000 --reporter spec \\\"test/integration/**/*.test.js\\\"\",\n    \"cover\": \"npm run cover-unit && npm run cover-integration && npm run merge-coverage\",\n    \"cover-integration\": \"nyc --reporter=text-lcov > coverage/lcov-integration.info mocha test/integration/**/*.test.js\",\n    \"cover-unit\": \"nyc --reporter=text-lcov > coverage/lcov-unit.info mocha test/unit/**/*.test.js\",\n    \"merge-coverage\": \"lcov-result-merger \\\"coverage/*.info\\\" \\\"coverage/lcov.info\\\"\",\n    \"cover-unit-html\": \"nyc --reporter=html mocha test/unit/**/*.test.js\"\n  },\n  \"repository\": {\n    \"url\": \"https://github.com/mvillarrealb/sequelize-event-stream.git\",\n    \"type\": \"git\"\n  },\n  \"author\": \"Marco Villarreal <erick.slayer.m.v@gmail.com>\",\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"engines\": {\n    \"node\": \">=10.9.0\"\n  },\n  \"dependencies\": {\n    \"amqplib\": \"^0.5.2\",\n    \"aws-sdk\": \"^2.348.0\",\n    \"debug\": \"^4.1.0\",\n    \"kafka-node\": \"^3.0.1\",\n    \"sequelize\": \"^4.39.0\",\n    \"uuid\": \"^3.3.2\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.1.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.7.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-config-prettier\": \"^3.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.2\",\n    \"eslint-plugin-mocha\": \"^5.2.0\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"lcov-result-merger\": \"^3.1.0\",\n    \"nyc\": \"^12.0.2\",\n    \"mocha\": \"^5.2.0\",\n    \"prettier\": \"^1.14.3\",\n    \"sinon\": \"^7.1.1\",\n    \"sqlite3\": \"^4.0.2\"\n  }\n}\n",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# sequelize-event-stream\n\n[![npm version](https://img.shields.io/npm/v/sequelize-event-stream.svg)](https://www.npmjs.com/package/sequelize-event-stream)\n[![Build Status](https://travis-ci.org/mvillarrealb/sequelize-event-stream.svg?branch=master)](https://travis-ci.org/mvillarrealb/sequelize-event-stream)\n[![codecov](https://codecov.io/gh/mvillarrealb/sequelize-event-stream/branch/master/graph/badge.svg)](https://codecov.io/gh/mvillarrealb/sequelize-event-stream)\n![node](https://img.shields.io/node/v/sequelize-event-stream.svg)\n[![License](https://img.shields.io/npm/l/sequelize-event-stream.svg?maxAge=2592000?style=plastic)](https://github.com/mvillarrealb/sequelize-event-stream/blob/master/LICENSE)\n\nEvent publishing capabilities for your sequelize's models using hooks.\n\n**sequelize-event-stream** adds a sugaring layer to your database connection, listening for every transactional event in sequelize.\n\n![alt text](./docs/images/sequelize-event-stream-overview.png \"sequelize-event-stream architecture overview\")\n\nThe architecture works as follows:\n\nThe sequelize event stream is attached to your sequelize's instance, it will listen for every supported hook. Supported hooks are:\n\n* afterCreate\n* afterUpdate\n* afterDestroy\n* afterBulkCreate\n* afterBulkUpdate\n* afterBulkDestroy\n\nOnce fired one of the listed hooks it will use a eventWorker configuration to send your message as an event to a queue/topic from the supported brokers.\n\n# Supported Sinks\n\n* Rabbitmq\n* Kafka\n* Amazon SQS\n\n# Installation\n\n```bash\nnpm install --save sequelize-event-stream\n```\n\n# Documentation\n\nYou can check the full [documentation](https://mvillarrealb.github.io/sequelize-event-stream/) to view full usage of this module.\n\n## Run all tests\n\nTo run all unit and integration tests:\n\n```bash\nnpm test\n```\n\n## Run unit tests only\n\nTo run the unit tests use the following command:\n\n```bash\nnpm run unit-test\n```\n\n## Run integ tests only\n\nTo run the integration tests use the following command:\n\n```bash\nnpm run integ-test\n```\n\n# Generate ESDOC Documentation\n\nTo geneate the ESDOC documentation use the following command:\n\n```bash\nnpm run docs\n```\n\n# Running the coverage\n\nTo run the coverage report use the following command\n```bash\nnpm run coverage\n```",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/docs/images",
    "name": "./docs/images",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/docs/pages/getting-started.md",
    "name": "./docs/pages/getting-started.md",
    "content": "# Getting Started\n\n## Creating an Instance\n\nCreating an instance is quite easy you just have to import the module\nand instantiate the class with the configuration.\n\n```javascript\nconst SequelizeEventStream = require('sequelize-event-stream');\n\nconst configuration = {\n  type: 'amqp'| 'kafka' | 'sqs',\n  options: {\n    ...\n  }\n};\n\nconst eventStream = new SequelizeEventStream(configuration);\n```\n\n## Attaching to sequelize\n\nTo enable the event triggering capability use the attach method to start the hook handling.\n\n```javascript\nconst sequelize = new Sequelize(..);\neventStream.attach(sequelize);\n```\n## Trigger Any hook\n\nAfter the eventStream is successfully attached to sequelize's then just trigger a hook and see the magic happens(or not).\n\n## Check with consumers",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/docs/pages/local_listeners.md",
    "name": "./docs/pages/local_listeners.md",
    "content": "\n# Local Listeners\n\nSince SequelizeEventStream inherits node's *EventEmitter* class you can listen for every hooked event locally using **on(eventName,handler)** method, just as the example bellow:\n\n```javascript\nconst eventStream  = new SequelizeEventStream(config);\n\neventStream.attach(sequelize);\n\neventStream.on(\"created\",(resourceEvent) => {\n   console.table(resourceEvent)\n});\n```\nOnce attached you just have to trigger an action: Creating a model for example and receive the payload on your local listener.\n\n## Supported events\n\nThis is the list of local events:\n\nevent|sequelize Action|description\n---|---|---\ncreated|create|Fired once a model instance is created\nupdated|update| Fired once a model instance gets updated\ndestroyed|destroy| Fired once a model instance gets destroyed\nbulk-created|bulkCreate| Fired once a bulk of models gets created\nbulk-updated|bulkUpdate| Fired once a bulk of models gets updated\nbulk-destroyed|bulkDestroy| Fired once a bulk of models gets destroyed",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/docs/pages/using-rabbitmq.md",
    "name": "./docs/pages/using-rabbitmq.md",
    "content": "# Using RabbitMQ\n\nTo enable rabbitmq support for event streams you just have to use\nthe type **amqp** on the SequelizeEventStream Constructor.\n\nThis module uses [amqplib](https://www.npmjs.com/package/amqplib) as the rabbitmq library of choice.\n\n## Queue architecture\n\n## Required configuration\n\nThe required configuration is the same used in amqplib, you can check [here](http://www.squaremobius.net/amqp.node/channel_api.html#connect) the configuration parameters. \n\nHowever the minimum parameters to get the rabbitmq producer to work is:\n \n connectURI.protocol\n connectURI.port\n connectURI.hostname\n connectURI.username\n connectURI.password\n connectURI.vhost\n\n ## Example initialization\n\n```javascript\nconst SequelizeEventStream = require('sequelize-event-stream');\n\nconst configuration = {\n  type: 'amqp',\n  options: {\n    exchange: 'sequelize-event-stream',\n    connectURI: {\n      protocol: 'amqp',\n      port: 5672,\n      hostname: '127.0.0.1',\n      username: 'rmqadmin',\n      password: 'casa1234',\n      vhost: '/'\n    }\n  }\n};\n\nconst eventStream = new SequelizeEventStream(configuration);\n\neventStream.attach(sequelize);\n```\n\n## Consume the messages\n\nTo check the consumes messages just create a consumer as the following example:\n\n```javascript\n  const exchange = 'sequelize-event-stream';\n  const connectionOpts = {\n    protocol: 'amqp',\n    port: 5672,\n    hostname: '127.0.0.1',\n    username: 'rmqadmin',\n    password: 'casa1234',\n    vhost: '/'\n  };\n  const connection = await AMQP.connect(connectionOpts);\n  const channel = await connection.createChannel();\n  //create a exclusive queue with a random generated name for the consumer exclusively\n  const response = await channel.assertQueue('', { exclusive: true });\n  // its binds the queue to the exchange to basically fetch a copy of every message published\n  channel.bindQueue(response.queue, exchange, '#');\n\n  channel.consume(\n    response.queue,\n    msg => {\n      let { event_id, event_name, event_model, event_timestamp } = JSON.parse(msg.content.toString());\n      //prints out a table with the event metadata\n      console.table({ event_id, event_name, event_model, event_timestamp });\n    },\n    { noAck: true }\n  );\n\n  ```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/docs/pages/using-kafka.md",
    "name": "./docs/pages/using-kafka.md",
    "content": "# Using Apache Kafka\n\nTo enable kafka support for event streams you just have to use\nthe type **kafka** on the SequelizeEventStream Constructor.\n\nThis module uses [kafka-node](https://www.npmjs.com/package/kafka-node) as the kafka library of choice, also the producer implemented is the high level producer.\n\n## Topics\n\nThe following list contains the topics used by the kafka publisher\n\ntopic|description\n---|---\ncreated| Created model instances\nupdated| Updated model instances\ndestroyed| Destroyed model instances\nbulk-created| Bulk created model instances\nbulk-destroyed| Bulk destroyed model instances \nbulk-updated| Bulk updated model instances\n\n## Required configuration\n\nThe required configuration is the same used in KafkaClient, you can check [here](https://www.npmjs.com/package/kafka-node#kafkaclient) the configuration parameters. \n\nHowever the minimum parameters to get the kafka producer to work is **kafkaHost**.\n\n## Example initialization\n\n```javascript\nconst SequelizeEventStream = require('sequelize-event-stream');\n\nconst configuration = {\n  type: 'kafka',\n  options: {\n    kafkaHost: '127.0.0.1:9092'\n  }\n};\n\nconst eventStream = new SequelizeEventStream(configuration);\n\neventStream.attach(sequelize);\n```\n\n## Consume the messages\n\nTo check the consumes messages just create a HigLevelConsumer and connect to the desired topics, in the following example we connect to the created, updated an destroyed topics at the same time\n\n```javascript\n  \n  const { HighLevelConsumer, KafkaClient } = require('kafka-node');\n  \n  const kafkaHost = '127.0.0.1:9092';\n  const client = KafkaClient({ kafkaHost });\n  const consumer = new HighLevelConsumer(\n    client,\n    [\n      { topic: 'created' },\n      { topic: 'updated' },\n      { topic: 'destroyed' }\n    ],\n    {\n      groupId: 'event-stream-consumer'\n    }\n  );\n\n  consumer.on('message', message => {\n    console.log(message);\n  });\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/mvillarreal/Marco/develop/nodejs/my-node-modules/sequelize-event-stream/docs/pages/using-sqs.md",
    "name": "./docs/pages/using-sqs.md",
    "content": "# Using Amazon SQS\n\n## Queue architecture\n\n## Required configuration\n\n## Consume the messages",
    "static": true,
    "access": "public"
  }
]